{"version":3,"sources":["features/status/Status.module.css","domain/disk.ts","app/config.ts","utils/utils.ts","core/game.ts","features/board/boardSlice.ts","features/status/statusSlice.ts","features/board/Board.tsx","features/status/Status.tsx","features/game/Game.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/board/Board.module.css"],"names":["module","exports","Disk","width","config","convertToIndexFromPosition","x","y","countDisks","disks","disk","filter","v","length","players","Black","White","initialDisks","Array","fill","setDisk","position","calculateFlipLines","diskAt","index","lines","calculateFlipPositionsInLine","direction","dx","dy","line","push","isPuttable","some","calculatePuttablePositions","positions","initialState","puttablePositions","value","boardSlice","createSlice","name","reducers","putDisk","state","action","payload","forEach","i","flipDisk","actions","selectBoard","board","step","nextPlayer","winner","statusSlice","nextTurn","finishGame","whiteCount","blackCount","find","player","selectStatus","status","Cell","onClick","className","classNames","styles","cell","white","black","Board","useSelector","onClickCell","isContainPositions","map","key","Math","floor","Status","item","renderNextPlayer","renderWinner","count","diskCount","renderDiskCounter","Game","dispatch","useDispatch","useEffect","isFinishedGame","hasPuttablePositions","console","log","App","store","configureStore","reducer","boardReducer","statusReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d2337ee9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"Status_status__GrbJO\",\"diskCount\":\"Status_diskCount__3B7VV\",\"white\":\"Status_white__2zZYD\",\"black\":\"Status_black__32MOu\"};","\nexport enum Disk {\n  White,\n  Black\n}\n","\nexport default {\n  boardWidth: 8, /* 盤面の1辺のマス数 */\n}\n","import config from \"../app/config\";\nimport { Disk } from \"../domain/disk\";\n\nconst { boardWidth: width } = config;\n\n/* Disk[]配列のindexから盤面の位置(x,y)に変換 */\nexport const convertToPositionFromIndex = (index: number): [number, number] =>\n  [index % width, Math.floor(index / width)];\n\n/* 盤面の位置(x,y)からDisk[]配列のindexに変換 */\nexport const convertToIndexFromPosition = (x: number, y: number): number =>  x + width * y;\n\nexport const isContainPositions =\n  (position: [number, number], positions: [number, number][]): Boolean => {\n    const [x, y] = position;\n    return positions.some(v => x === v[0] && y === v[1]);\n  };\n\n/* 置かれているDiskの数を返す */\nexport const countDisks = (disks: (Disk|null)[], disk: Disk|null = null): number => {\n  if (disk !== null) {\n    return disks.filter(v => v === disk).length;\n  }\n  return disks.filter(v => v !== null).length;\n}\n","import { Disk } from \"../domain/disk\";\nimport config from \"../app/config\";\nimport { convertToIndexFromPosition } from \"../utils/utils\";\nimport { Player } from \"../domain/player\";\n\nconst { boardWidth: width } = config;\n\nconst player1: Player = { disk: Disk.Black };\nconst player2: Player = { disk: Disk.White };\nexport const players: [Player, Player] = [player1, player2];\n\nexport const initialDisks = (): (Disk|null)[] => {\n  const disks: (Disk|null)[] =\n    Array<Disk|null>(width * width).fill(null);\n  setDisk(disks, Disk.White, [width / 2 - 1, width / 2 - 1]);\n  setDisk(disks, Disk.White, [width / 2, width / 2]);\n  setDisk(disks, Disk.Black, [width / 2 - 1, width / 2]);\n  setDisk(disks, Disk.Black, [width / 2, width / 2 - 1]);\n  return disks;\n};\n\nexport const setDisk = (disks: (Disk|null)[], disk: Disk, position: [number, number]) => {\n  const [x, y] = position;\n  const i = convertToIndexFromPosition(x, y);\n  disks[i] = disk\n}\n\nexport const flipDisk = (disks: (Disk|null)[], position: [number, number]) => {\n  const [x, y] = position;\n  const i = convertToIndexFromPosition(x, y);\n  const disk = disks[i];\n  if (disk !== null) {\n    disks[i] = disk === Disk.White ? Disk.Black : Disk.White;\n  }\n}\n\nexport const calculateFlipLines =\n  (disks: (Disk|null)[], disk: Disk, position: [number, number]): [number, number][][] => {\n    const directions: [number, number][] = [\n      [1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]\n    ];\n\n    const diskAt = (x: number, y: number): Disk|null => {\n      if (x < 0 || y < 0 || x >= width || y >= width) {\n        return null;\n      }\n      const index = convertToIndexFromPosition(x, y);\n      return disks[index];\n    }\n\n    const lines: [number, number][][] = [];\n\n    const calculateFlipPositionsInLine =\n      (position: [number, number], direction: [number, number]) => {\n        let [x, y] = position;\n        const [dx, dy] = direction;\n        let line: [number, number][] = [];\n        while(true) {\n          x += dx;\n          y += dy;\n          if (diskAt(x, y) !== disk && diskAt(x, y) !== null) {\n            line = [...line, [x, y]]\n            continue;\n          }\n          if (diskAt(x, y) === disk) {\n            break;\n          }\n          if (diskAt(x, y) === null) {\n            line = [];\n            break;\n          }\n        }\n        return line;\n      };\n\n    for (const direction of directions) {\n      lines.push(calculateFlipPositionsInLine(position, direction));\n    }\n    return lines;\n  }\n\nexport const isPuttable = (disks: (Disk|null)[], disk: Disk, position: [number, number]): Boolean => {\n  const lines = calculateFlipLines(disks, disk, position);\n  return lines.some(v => v.length > 0);\n}\n\nexport const calculatePuttablePositions = (disks: (Disk|null)[], disk: Disk): [number, number][] => {\n  const diskAt = (x: number, y: number): Disk|null => {\n    if (x < 0 || y < 0 || x >= width || y >= width) {\n      return null;\n    }\n    const index = convertToIndexFromPosition(x, y);\n    return disks[index];\n  }\n\n  const positions: [number, number][] = [];\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < width; y++) {\n      if (diskAt(x, y) !== null) continue;\n      if (!isPuttable(disks, disk, [x, y])) continue;\n      positions.push([x, y]);\n    }\n  }\n  return positions;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Disk } from \"../../domain/disk\";\nimport { RootState } from \"../../app/store\";\nimport {\n  initialDisks,\n  setDisk,\n  calculateFlipLines,\n  flipDisk,\n  calculatePuttablePositions,\n} from \"../../core/game\";\n\ninterface State {\n  disks: (Disk|null)[];\n  puttablePositions: { disk: Disk, value: [number, number][] }[];\n}\n\nconst initialState: State = {\n  disks: initialDisks(),\n  /* 白黒それぞれの置ける位置 */\n  puttablePositions: [\n    { disk: Disk.White, value: calculatePuttablePositions(initialDisks(), Disk.White) },\n    { disk: Disk.Black, value: calculatePuttablePositions(initialDisks(), Disk.Black) },\n  ]\n};\n\nexport const boardSlice = createSlice({\n  name: 'board',\n  initialState,\n  reducers: {\n    putDisk: (state, action: PayloadAction<{ disk: Disk, position: [number, number]}>) => {\n      const { disk, position } = action.payload;\n      const { disks } = state;\n      setDisk(disks, disk, position);\n\n      /* 挟んだ石をひっくり返す */\n      const lines = calculateFlipLines(disks, disk, position);\n      lines.forEach(line => line.forEach(position => flipDisk(disks, position)));\n\n      /* 白黒それぞれ置くことができる場所を計算 */\n      state.puttablePositions = [\n        { disk: Disk.White, value: calculatePuttablePositions(disks, Disk.White) },\n        { disk: Disk.Black, value: calculatePuttablePositions(disks, Disk.Black) },\n      ];\n    }\n  }\n});\n\nexport const { putDisk } = boardSlice.actions;\n\nexport const selectBoard = (state: RootState) => state.board;\n\nexport default boardSlice.reducer;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Player } from \"../../domain/player\";\nimport { RootState } from \"../../app/store\";\nimport { Disk } from \"../../domain/disk\";\nimport { countDisks } from \"../../utils/utils\";\nimport { players } from \"../../core/game\";\n\ninterface Status {\n  step: number,\n  nextPlayer: Player|null,\n  winner: Player|null,\n}\n\nconst initialState: Status = {\n  step: 1,\n  nextPlayer: players[0],\n  winner: null,\n};\n\nexport const statusSlice = createSlice({\n  name: 'status',\n  initialState,\n  reducers: {\n    nextTurn: (state) => {\n      const { step } = state;\n      state.nextPlayer = players[(step + 1) % 2 === 0 ? 1 : 0];\n      state.step = step + 1;\n    },\n    finishGame: (state, action: PayloadAction<(Disk|null)[]>) => {\n      const whiteCount = countDisks(action.payload, Disk.White);\n      const blackCount = countDisks(action.payload, Disk.Black);\n      if (whiteCount > blackCount) {\n        state.winner = players.find(player => player.disk === Disk.White) || null;\n      } else if (whiteCount < blackCount) {\n        state.winner = players.find(player => player.disk === Disk.Black) || null;\n      }\n      state.nextPlayer = null;\n    }\n  }\n});\n\nexport const { nextTurn, finishGame } = statusSlice.actions;\n\nexport const selectStatus = (state: RootState) => state.status;\n\nexport default statusSlice.reducer;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Disk } from '../../domain/disk';\nimport { selectBoard } from './boardSlice';\nimport { useSelector } from 'react-redux';\nimport { convertToPositionFromIndex, isContainPositions } from '../../utils/utils';\n\nimport styles from './Board.module.css';\nimport { selectStatus } from '../status/statusSlice';\n\nconst Cell: React.FC<{\n  disk: Disk|null,\n  position: [number, number],\n  onClick: (position: [number, number]) => void\n}> = ({ disk, position, onClick }) => {\n  if (disk === Disk.White) {\n    return (<div className={classNames(styles.cell, styles.white)}>&#9679;</div>)\n  }\n  if (disk === Disk.Black) {\n    return (<div className={classNames(styles.cell, styles.black)}>&#9679;</div>);\n  }\n  return (\n    <div className={styles.cell}>\n      <button onClick={() => onClick(position)}></button>\n    </div>\n  );\n}\n\nconst Board: React.FC<{\n  putDisk: (position: [number, number]) => void\n}> = ({ putDisk }) => {\n  const { disks, puttablePositions } = useSelector(selectBoard);\n  const { nextPlayer } = useSelector(selectStatus);\n  const onClickCell =\n    (position: [number, number]) => {\n      const positions: [number, number][] = puttablePositions.find(v => v.disk === nextPlayer?.disk)?.value || [];\n      if (nextPlayer !== null && isContainPositions(position, positions)) {\n        putDisk(position);\n      }\n    };\n\n  return (\n    <div>\n      <div className={styles.board}>\n        {disks.map((disk, i) =>\n          <Cell key={i}\n            disk={disk}\n            position={convertToPositionFromIndex(i)}\n            onClick={position => onClickCell(position)} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { selectStatus } from './statusSlice';\nimport { Disk } from '../../domain/disk';\n\nimport styles from './Status.module.css';\nimport { Player } from '../../domain/player';\nimport { selectBoard } from '../board/boardSlice';\nimport { countDisks } from '../../utils/utils';\n\nconst renderDiskCounter = (disk: Disk, count: number) => (\n  <div key={disk === Disk.White ? 'white' : 'black'}\n    className={styles.diskCount}\n  >\n    <span\n      className={\n        classNames({\n          [styles.white]: disk === Disk.White,\n          [styles.black]: disk === Disk.Black\n        })\n      }\n    >\n      &#9679;\n    </span>\n    <span>{`: ${count}`}</span>\n  </div>\n);\n\nconst renderNextPlayer = (player: Player) => (\n  <div>\n    {'Next: '}\n    <span\n      className={\n        classNames({\n          [styles.white]: player.disk === Disk.White,\n          [styles.black]: player.disk === Disk.Black\n        })\n      }\n    >\n      &#9679;\n    </span>\n  </div>\n);\n\nconst renderWinner = (player: Player) => (\n  <div>\n    <span\n      className={\n        classNames({\n          [styles.white]: player.disk === Disk.White,\n          [styles.black]: player.disk === Disk.Black\n        })\n      }\n    >\n      &#9679;\n    </span>\n    {' won'}\n  </div>\n);\n\nexport const Status = () => {\n  const { step, nextPlayer, winner } = useSelector(selectStatus);\n  const { disks } = useSelector(selectBoard);\n  return (\n    <div className={styles.status}>\n      <ul>\n        <li className={styles.item}>{`Step: #${step}`}</li>\n      {nextPlayer\n        ? <li className={styles.item}>{renderNextPlayer(nextPlayer)}</li>\n        : winner\n          ? <li className={styles.item}>{renderWinner(winner)}</li>\n          : <li className={styles.item}>Tied</li>\n      }\n      <li className={styles.item}>\n        {[Disk.Black, Disk.White].map(disk => renderDiskCounter(disk, countDisks(disks, disk)))}\n      </li>\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport Board from '../board/Board';\nimport { Status } from '../status/Status';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectStatus, nextTurn, finishGame } from '../status/statusSlice';\nimport { selectBoard, putDisk } from '../board/boardSlice';\nimport { Disk } from '../../domain/disk';\n\nexport const Game = () => {\n  const { step, nextPlayer } = useSelector(selectStatus);\n  const { disks, puttablePositions } = useSelector(selectBoard);\n  const dispatch = useDispatch();\n\n  /* 白も黒も置く場所がない場合ゲーム終了とみなす */\n  const isFinishedGame = () =>\n    !puttablePositions.find(v => v.disk === Disk.White)?.value.length\n      && !puttablePositions.find(v => v.disk === Disk.Black)?.value.length;\n\n  const hasPuttablePositions = (disk: Disk) =>\n    !!puttablePositions.find(v => v.disk === disk)?.value.length;\n\n  useEffect(() => {\n    // ターンが変わるごとに実行\n    if (nextPlayer) {\n      if (isFinishedGame()) {\n        console.log(\"game...\");\n        dispatch(finishGame(disks));\n      } else if (!hasPuttablePositions(nextPlayer.disk)) {\n        // 置く場所がない場合パス\n        console.log(`${nextPlayer.disk === Disk.White ? 'White' : 'Black'} passed.`);\n        dispatch(nextTurn());\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [step, dispatch]);\n\n  /* 盤に石を置く処理 */\n  const putDiskAt = (position: [number, number]): void => {\n    if (nextPlayer) {\n      dispatch(putDisk({ disk: nextPlayer.disk, position }));\n      dispatch(nextTurn());\n    }\n  };\n\n  return (\n    <>\n      <Board putDisk={putDiskAt} />\n      <Status />\n    </>\n  );\n};\n","import React from 'react';\r\nimport './App.css';\r\nimport { Game } from '../features/game/Game';\r\n\r\nconst App: React.FC = () => (\r\n  <div className=\"App\">\r\n    <header className=\"App-header\">\r\n      <h1>Reversi</h1>\r\n    </header>\r\n    <Game />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport boardReducer from '../features/board/boardSlice';\r\nimport statusReducer from '../features/status/statusSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    board: boardReducer,\r\n    status: statusReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__2NjSw\",\"cell\":\"Board_cell__3urXG\",\"white\":\"Board_white__2ataP\",\"black\":\"Board_black__H1zmJ\"};"],"sourceRoot":""}